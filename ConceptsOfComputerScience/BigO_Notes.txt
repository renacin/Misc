Name:                                            Renacin Matadeen
Date:                                               06/30/2020
Title                                      Understanding Big-O-Notation
------------------------------------------------------------------------------------------------------------------------
General:
    - Examples From:
        https://stackabuse.com/big-o-notation-and-algorithm-analysis-with-python-examples/
        https://towardsdatascience.com/understanding-time-complexity-with-python-examples-2bda6e8158a7
        https://skerritt.blog/big-o/#-how-to-calculate-big-o-notation-of-a-function-discrete-maths-


    - Big O In Order Of Time Complexity:
        = O(1) ----------- Constant
        = O(logN) -------- Logarithmic
        = O(RootN) ------- Root
        = O(N) ----------- Linear
        = O(logN^C) ------ PolyLogarithmic
        = O(N^C) --------- Polynomial
        = O(C^N) --------- Exponential
        = O(N!) ---------- Factorial

    - We don't say that a function is Big O XX, rather that it falls within Big O of XX

    - Big O refers to the worst case scenario [Upper Bound]
    - Theta refers to the average case scenario [Average Bound]
    - Omega Refers to the lowest case scenario [Lower Bound]

    - Remember many operations are conducted in a loop
        print("Hello")         = 1
        for x in range(n):     = n + 1 [Loops N times, however at the last loop one more iteration is conducted to end]
            print(x)           = n [Printed N time]

        = 1 + n + 1 + n
        = 2n + 2

    - Time complexity depends on the structure that it is in
        Ex:
            Time Complexity Of A While Loop
                + Depends on the control case [the thing that make the true statement that keeps it looping]

                   LINEAR WHILE LOOP
                    - n = 0               = 1
                    - while n <= 10:      = n + 1
                        print(n)          = n
                        n = n + 1         = n

                    LOGARITHMIC WHILE LOOP
                     - n = 10'000         = 1
                     - while n > 0:       = Log10N + 1
                         print(n)         = Log10N
                         n = n // 10      = Log10N

---------------------------------------[EXAMPLE #1A - Constant Complexity]----------------------------------------------
Ex:
    print("Hello World")               = 1

BigO:
    = O(1)

Explanation:
    - In this case the section of code will always take the same amount of time
    - Size of inputs does not influence the time a code takes to run

---------------------------------------[EXAMPLE #2A - Logarithmic Complexity]-------------------------------------------
Ex:
    for name in N:                      = n + 1
        print(name)                     = n

BigO:
    = n + 1 + n
    = 2n + 1
    = O(N)

Explanation:
    - The time it takes decreases by half for every iteration
    - 100'000, 50'000, 25'000, 12'500, 6'250, 3'125, 1'562
    - Resembles a logarithmic pattern
    -Binary Search Tree is a good example of a function taking O(LogN)

----------------------------------------[EXAMPLE #3A - Logarithmic Complexity]------------------------------------------
Ex:
    number = 100'000                    = 1
    while number > 0:                   = Log10N + 1
        print(number)                   = Log10N
        number = number // 10           = Log10N

BigO:
    = O(LogN) [Note that in this case the base is 10, not 2]

Explanation:
    - The time it takes to run this section of code depends on the number of inputs
    - The larger the number of inputs the longer it takes to run this section of code

------------------------------------[EXAMPLE #3B - Complex Linear Complexity]-------------------------------------------
Ex:
    print("Last Names:")
    for last_name in list_of_last_names:
        print(last_name)

    print("First Names:")
    for first_name in list_of_first_names:
        print(first_name)

BigO:
    = O(1) + O(N) + O(1) + O(N)
    = O(2) + O(2N)
    = O(2N)

---------------------------------------[EXAMPLE #4A - Polynomial Complexity]--------------------------------------------
Ex:
    for first_name in list_of_first_names:
        for last_name in list_of_last_names:
            print(first_name, last_name)

BigO:
    = O(N^2)

Explanation:
    - For each item in the outer loop, loop through the values of the inner loop
    - Simply stated, N*N (For the number of nested loops)

-----------------------------------[EXAMPLE #4B - Complex Polynomial Complexity]----------------------------------------
Ex:
    for first_name in list_of_first_names:
        for last_name in list_of_last_names:
            for nation in nation_list
                print(first_name, last_name, nation)

    print("Hello World")

    for first_name in list_of_first_names:
        print(first_name)

BigO:
    = O(N^3) + O(1) + O(N)
    = O(N^3)

--------------------------------------[EXAMPLE #5A - Exponential Complexity]--------------------------------------------
Ex:
    def recur(n):
       if n == 1:                               = 1
            return n                            = 1
       else:                                    = 2^n
            return(recur(n-1) + recur(n-1))

BigO:
    = O(2^N)

Explanation:
    - If base case is not satisfied, value will create recursively iterate, and then try to compute

    L0                                  4
                                        |
    L1                          3 ------------- 3
                                |               |
    L2                      2 ----- 2       2 ----- 2
                            |       |       |       |
    L3                    1---1   1---1   1---1   1---1

    - In this case Big(O) is 2^N+1 - 1, where N is the number of branches
    - Recursion is hard, Need more help
