Name:                                            Renacin Matadeen
Date:                                              04/10/2021
Title                                   Procedural Vs. Functional Programming 
------------------------------------------------------------------------------------------------------------------------

Following:
    + CyberU: Functional Programming In Python
    + https://hackr.io/blog/procedural-programming
    + https://newrelic.com/blog/nerd-life/python-programming-styles
    + https://www.programiz.com/python-programming/object-oriented-programming


Notes:
    + Like painting, cooking, or writing there are many ways to create an end product. Programming is very similar.
    + Generally speaking, most developers aim to develop a robust product, that is efficient in its computation, as well as
      in regards to the time it takes.

    + A developer can develop code in 4 ways; Procedurally, Functionally, Imperative, or Via Object Oriented Design
    + Each has it's own strengths, and weaknesses; and it is up to the developer to decide which works best in any scenario

    -------------------------------------------------------------------------------------------------------------------
    Procedural Programming:
        + Procedural Programming may be the first programming paradigm that a new developer will learn. Fundamentally, 
          the procedural code is the one that directly instructs a device on how to finish a task in logical steps
        + A linear top-down approach and treats data and procedures as two different entities
        + Procedural Programming divides the program into procedures, which are also known as 
          routines or functions, simply containing a series of steps to be carried out

        Key Features:
            + Predefined functions
            + Local Variable
            + Global Variable
            + Modularity
            + Parameter Passing

        Advantages
            + Procedural Programming is excellent for general-purpose programming
            + The coded simplicity along with ease of implementation of compilers and interpreters
            + A large variety of books and online course material available on tested algorithms, making it easier to learn along the way
            + The source code is portable, therefore, it can be used to target a different CPU as well
            + The code can be reused in different parts of the program, without the need to copy it
            + Through Procedural Programming technique, the memory requirement also slashes
            + The program flow can be tracked easily

        Disadvantages
            + The Procedural code is often not reusable, which may pose the need to recreate the code if is needed to use in another application
            + Difficult to relate with real-world objects
            + The importance is given to the operation rather than the data, which might pose issues in some data-sensitive cases
            + The data is exposed to the whole program, making it not so security friendly

        Example:
            def function(input_list):
                sum = 0
                for x in input_list:
                    sum += x
                return sum

            print(function(input_list))


    -------------------------------------------------------------------------------------------------------------------
    Object-Oriented Programming:
        + 

        Example:
            def function(input_list):
                sum = 0
                for x in input_list:
                    sum += x
                return sum

            print(function(input_list))

