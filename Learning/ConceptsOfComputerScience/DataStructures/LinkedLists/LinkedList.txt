Name:                                            Renacin Matadeen
Date:                                               07/07/2020
Title                                    Understanding Linked Lists
------------------------------------------------------------------------------------------------------------------------
Links Followed:
    https://stackabuse.com/linked-lists-in-detail-with-python-examples-single-linked-lists/
    https://stackabuse.com/python-linked-lists/
    https://www.youtube.com/watch?v=JlMyYuY1aXU
    https://www.youtube.com/watch?v=qp8u-frRAnU
------------------------------------------------------------------------------------------------------------------------

SINGLY LINKED LISTS

Notes:

    + Arrays
        - One of the simplest data structures in programming
        - Arrays are index based structures, where each element has an associated index
        - Arrays are stored in sequential blocks of memory
        - Size of arrays are specified during allocations

    + Linked Lists
        - A linked list is a linear data structure
        - Is not index based, but rather based on nodes with references
        - A node contains the data, as well as pointers to the next data source, or even the previous
        - Data are not stored in contiguous memory locations; rather randomly stored

    + Linked Lists Preferred When:
        - Constant-time insertions/deletions from the list, dependence on time is critical
        - Have no clue how many items will be in the list
        - Don't need random access to any elements

        - Are fundamental to the construction of other data structures

    + Arrays Preferable When:
        - Need indexed/random access to elements
        - Know the number of elements in the array ahead of time
        - Speed when iterating through all the elements in sequence
        - Memory is a concern

    + Linked Lists
        - Works With Nodes, They Contain:
            + Data
            + Pointers To Other Nodes

        - When Adding To The First / Deleting The First Elem, Is Big O(1)
        - But You Must Order So Your Adding To The First Spot

        - Need a header node to start the list

        - SENTINEL NODES ARE JUST REFERENCES, NOT ACTUALLY NODES!!

------------------------------------------------------------------------------------------------------------------------

DOUBLY LINKED LISTS

Notes:
    + What Is The Difference Between Single Vs Double Linked Lists?
        - Contains References To Both The Previous And Next Elements
        - DLL Can Be Traversed Forwards, As Well As Backwards

------------------------------------------------------------------------------------------------------------------------

CIRCULAR LINKED LISTS

Notes:
    + Circular Linked List, And A Single Linked List
        - Very Similar, Both Contain Head / Tail Sentinel Nodes And Only Point In One Direction
        - Both Can Only Be Traversed In One Direction
        - However Once At The Tail A Circular linked List Can Continue To The Head, And Keep Iterating
